{"version":3,"sources":["components/Header.jsx","components/Formulario.jsx","components/Evento.jsx","components/Eventos.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","uk-margin","titulo","Formulario","nombreRef","React","createRef","categoríaRef","mostrarOpciones","key","categoria","_this","categorias","id","name_localized","value","buscarEvento","e","preventDefault","datosBusqueda","nombre","current","obtenerEventos","Object","keys","this","onSubmit","ref","type","placeholder","map","Component","Evento","info","name","descripcion","description","text","substr","logo","src","url","alt","href","target","rel","Eventos","uk-grid","eventos","components_Evento","App","token","ordenar","state","consultarCategorias","_callee","regenerator_default","wrap","_context","prev","next","concat","fetch","then","respuesta","json","setState","categories","stop","_callee2","busqueda","_context2","events","components_Header","components_Formulario","components_Eventos","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAUeA,EARA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYC,YAAU,QACrCJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAA6BJ,EAAMM,UC4D7CC,6MA5DXC,UAAYC,IAAMC,cAClBC,kBAAeF,IAAMC,cAErBE,gBAAkB,SAACC,GACf,IAAMC,EAAYC,EAAKf,MAAMgB,WAAWH,GACjCI,EAAsBH,EAAtBG,GAAIC,EAAkBJ,EAAlBI,eAEX,OAAKD,GAAOC,EAGRjB,EAAAC,EAAAC,cAAA,UAAQgB,MAAOF,EAAIJ,IAAKI,GAAMC,GAHC,QAOvCE,aAAe,SAACC,GACZA,EAAEC,iBAGF,IAAMC,EAAgB,CAClBC,OAAQT,EAAKP,UAAUiB,QAAQN,MAC/BL,UAAWC,EAAKJ,kBAAac,QAAQN,OAIzCJ,EAAKf,MAAM0B,eAAeH,4EAO1B,IAAMP,EAAaW,OAAOC,KAAKC,KAAK7B,MAAMgB,YAE1C,OACIf,EAAAC,EAAAC,cAAA,QAAM2B,SAAUD,KAAKT,cACjBnB,EAAAC,EAAAC,cAAA,YAAUC,UAAU,yBACpBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAAlB,4CAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,YAAU,QACjCJ,EAAAC,EAAAC,cAAA,SAAO4B,IAAKF,KAAKrB,UAAWwB,KAAK,OAAO5B,UAAU,WAAW6B,YAAY,+BAE7EhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,YAAU,QACjCJ,EAAAC,EAAAC,cAAA,UAAQ4B,IAAKF,KAAKlB,kBAAcP,UAAU,aACrCY,EAAWkB,IAAIL,KAAKjB,mBAG7BX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,YAAU,QACjCJ,EAAAC,EAAAC,cAAA,UAAQ6B,KAAK,SAAS5B,UAAU,8BAAhC,qBArDC+B,aCgCVC,EAhCA,SAACpC,GAIZ,IAFeA,EAAMqC,KAAdC,KAEI,OAAO,KAGlB,IAAIC,EAAevC,EAAMqC,KAAKG,YAAYC,KAAMC,OAAO,EAAG,KAE1D,OAAOzC,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACO,MAAnBJ,EAAMqC,KAAKM,KACV1C,EAAAC,EAAAC,cAAA,OAAKyC,IAAK5C,EAAMqC,KAAKM,KAAKE,IAAKC,IAAK9C,EAAMqC,KAAKC,KAAKG,OAEpD,IAGJxC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBJ,EAAMqC,KAAKC,KAAKG,MAC/CxC,EAAAC,EAAAC,cAAA,SAAIoC,IAGNtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,KAAG4C,KAAM/C,EAAMqC,KAAKQ,IAAKzC,UAAU,gCAAgC4C,OAAO,SAASC,IAAI,uBAAvF,mBCDGC,0LApBF,IAAAnC,EAAAc,KACL,OAAO5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuB+C,UAAQ,QAE9CxB,OAAOC,KAAKC,KAAK7B,MAAMoD,SAASlB,IAAI,SAAArB,GAAG,OAMtCZ,EAAAC,EAAAC,cAACkD,EAAD,CAEEhB,KAAMtB,EAAKf,MAAMoD,QAAQvC,eAZrBsB,cCoEPmB,6MAjEbC,MAAQ,yBACRC,QAAU,SAEVC,MAAQ,CACNzC,WAAY,GACZoC,QAAS,MASXM,yCAAsB,SAAAC,IAAA,IAAAd,EAAA,OAAAe,EAAA1D,EAAA2D,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEhBnB,EAFgB,sDAAAoB,OAE4ClD,EAAKwC,MAFjD,iBAAAO,EAAAE,KAAA,EAIdE,MAAMrB,GACTsB,KAAK,SAAAC,GACJ,OAAOA,EAAUC,SAElBF,KAAM,SAAAnD,GACLD,EAAKuD,SAAS,CACZtD,WAAYA,EAAWuD,eAVT,wBAAAT,EAAAU,SAAAb,EAAA9B,WAetBH,qDAAiB,SAAA+C,EAAOC,GAAP,IAAA7B,EAAA,OAAAe,EAAA1D,EAAA2D,KAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,cAEXnB,EAFW,qDAAAoB,OAEgDS,EAASlD,OAFzD,gBAAAyC,OAE8ES,EAAS5D,UAFvF,aAAAmD,OAE4GlD,EAAKyC,QAFjH,WAAAS,OAEkIlD,EAAKwC,MAFvI,iBAAAoB,EAAAX,KAAA,EAITE,MAAMrB,GACTsB,KAAK,SAAAC,GACJ,OAAOA,EAAUC,SAElBF,KAAM,SAAAf,GACLrC,EAAKuD,SAAS,CACZlB,QAASA,EAAQwB,WAVR,wBAAAD,EAAAH,SAAAC,EAAA5C,kJAnBfA,KAAK6B,uDAmCL,OACEzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0E,EAAD,CACAvE,OAAO,aAGPL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAC2E,EAAD,CACA9D,WAAca,KAAK4B,MAAMzC,WACzBU,eAAkBG,KAAKH,iBAEvBzB,EAAAC,EAAAC,cAAC4E,EAAD,CACE3B,QAASvB,KAAK4B,MAAML,mBA3DdjB,aCOE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrF,EAAAC,EAAAC,cAACoF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.eaaa97e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <header className=\"uk-margin\" uk-margin=\"true\">\r\n           <h1 className=\"uk-text-center hero-title\">{props.titulo}</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass Formulario extends Component {\r\n\r\n    //referencias de inputs\r\n    nombreRef = React.createRef();\r\n    categoríaRef = React.createRef();\r\n\r\n    mostrarOpciones = (key) => {\r\n        const categoria = this.props.categorias[key];\r\n        const {id, name_localized} = categoria;\r\n\r\n        if (!id || !name_localized) return null;\r\n\r\n        return (\r\n            <option value={id} key={id} >{name_localized}</option>\r\n        )\r\n    };\r\n\r\n    buscarEvento = (e) =>{\r\n        e.preventDefault();\r\n\r\n        //crear el objeto\r\n        const datosBusqueda = {\r\n            nombre: this.nombreRef.current.value,\r\n            categoria: this.categoríaRef.current.value\r\n        }\r\n\r\n        //pasar por props\r\n        this.props.obtenerEventos(datosBusqueda);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const categorias = Object.keys(this.props.categorias);\r\n\r\n        return (\r\n            <form onSubmit={this.buscarEvento}>\r\n                <fieldset className=\"uk-fieldset uk-margin\">\r\n                <legend className=\"uk-legend uk-text-center\">\r\n                Buscar eventos por nombre o categoría\r\n                </legend>\r\n\r\n                <div className=\"uk-column-1-3@m uk-margin\">\r\n                    <div className=\"uk-margin\" uk-margin=\"true\">\r\n                        <input ref={this.nombreRef} type=\"text\" className=\"uk-input\" placeholder=\"Nombre de Evento o Ciudad\"/>\r\n                    </div>\r\n                    <div className=\"uk-margin\" uk-margin=\"true\">\r\n                        <select ref={this.categoríaRef} className=\"uk-select\">\r\n                            {categorias.map(this.mostrarOpciones)}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"uk-margin\" uk-margin=\"true\">\r\n                        <button type=\"submit\" className=\"uk-button uk-button-danger\">Buscar</button>\r\n                    </div>  \r\n                </div>\r\n\r\n                </fieldset>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\n\r\nconst Evento = (props) => {\r\n\r\n    const {name} = props.info;\r\n\r\n    if (!name) return null;\r\n\r\n    //acortar descripcion a 250 chars max\r\n    let descripcion = (props.info.description.text).substr(0, 250);\r\n\r\n    return <div>\r\n        <div className=\"uk-card uk-card-default\">\r\n          <div className=\"uk-card-media-top\">\r\n            {props.info.logo != null ? (\r\n              <img src={props.info.logo.url} alt={props.info.name.text} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </div>\r\n          <div className=\"uk-card-body\">\r\n            <h3 className=\"uk-card-title\">{props.info.name.text}</h3>\r\n            <p>{descripcion}</p>\r\n          </div>\r\n\r\n          <div className=\"uk-card-footer\">\r\n            <a href={props.info.url} className=\"uk-button uk-button-secondary\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n              Más Info\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>;\r\n};\r\n\r\nexport default Evento;","import React, { Component } from 'react';\r\nimport Evento from './Evento';\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nclass Eventos extends Component {\r\n    render() {\r\n        return <div className=\"uk-child-width-1-3@m\" uk-grid=\"true\">\r\n            {/* <TransitionGroup> */}\r\n              {Object.keys(this.props.eventos).map(key => (\r\n                    // <CSSTransition\r\n                    // key={key}\r\n                    // classNames=\"fade\"\r\n                    // timeout={500}\r\n                    // >\r\n                <Evento\r\n                  // pasa la informacion de los eventos y filtra por keys\r\n                  info={this.props.eventos[key]}\r\n                />\r\n                // </CSSTransition>\r\n              ))}\r\n            {/* </TransitionGroup> */}\r\n          </div>;\r\n    }\r\n}\r\n\r\nexport default Eventos;","import React, { Component } from 'react';\nimport Header from '../components/Header';\nimport Formulario from '../components/Formulario';\nimport Eventos from '../components/Eventos';\n\nclass App extends Component {\n\n  token = 'S3JHH6V4IVIKBF5V74LR';\n  ordenar = 'date';\n\n  state = {\n    categorias: [],\n    eventos: []\n  }\n\n  //run function cuando termina de iniciar el componente\n  componentDidMount(){\n    this.consultarCategorias();\n  }\n\n  // request de categorias con ES6 async/await de API\n  consultarCategorias = async () => {\n    \n    let url = `https://www.eventbriteapi.com/v3/categories/?token=${this.token}&locale=es_ES`;\n\n    await fetch(url) \n      .then(respuesta => {\n        return respuesta.json();\n      })\n      .then (categorias => {\n        this.setState({\n          categorias: categorias.categories\n        }) \n      })\n  };\n\n  obtenerEventos = async (busqueda) => {\n    \n    let url = `https://www.eventbriteapi.com/v3/events/search/?q=${busqueda.nombre}&categories=${busqueda.categoria}&sort_by=${this.ordenar}&token=${this.token}&locale=es_ES`;\n\n    await fetch(url) \n      .then(respuesta => {\n        return respuesta.json();\n      })\n      .then (eventos => {\n        this.setState({\n          eventos: eventos.events\n        }) \n      })\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header\n        titulo=\"Eventify\"\n        />    \n\n        <div className=\"uk-container\">\n          <Formulario\n          categorias = {this.state.categorias}\n          obtenerEventos = {this.obtenerEventos}\n          />   \n          <Eventos\n            eventos={this.state.eventos}\n          />\n        </div>     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}